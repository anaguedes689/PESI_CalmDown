private void inserirDadosNoFirebase(Jacket jacket) {
        mAuth = FirebaseAuth.getInstance();
        db = FirebaseFirestore.getInstance();
        String macAddress = address;

        if (macAddress != null) {
            Log.d("BluetoothService", macAddress);
        } else {
            Log.d("BluetoothService", "not found");
        }

        FirebaseUser currentUser = mAuth.getCurrentUser();
        if (currentUser != null) {
            currentUserId = currentUser.getUid();
            jacket.setUserId(currentUserId);
            jacket.setAddress(macAddress);
        }

        // Recupera todos os documentos da coleção
        db.collection("jacketdata")
                .whereEqualTo("address", macAddress)
                .whereEqualTo("userId", currentUserId)
                .get()
                .addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {
                    @Override
                    public void onComplete(@NonNull Task<QuerySnapshot> task) {
                        if (task.isSuccessful()) {
                            for (QueryDocumentSnapshot document : task.getResult()) {
                                // Encontrou um documento existente
                                existingDocumentId = document.getId();
                                setExistingDocumentId(existingDocumentId);
                                // Adiciona os novos valores médios às posições seguintes

                                existingRr = (List<Integer>) document.get("rr");
                                existingPulse = (List<Integer>) document.get("pulse");
                                existingBatteryLevel = (List<Integer>) document.get("batteryLevel");
                                existingPosition = (List<Long>) document.get("position");
                                existingBpmi = (List<Integer>) document.get("bpmi");
                                existingBpm = (List<Integer>) document.get("bpm");
                                existingNleads = (List<Integer>) document.get("nleads");
                                existingNbytes = (List<Integer>) document.get("nBytes");
                                List<Long>rr1 = (List<Long>) document.get("rr");

                                // Adiciona os novos valores médios às posições seguintes, incluindo valores iguais
                                existingRr.add(jacket.getRr().get(0));
                                existingPulse.add(jacket.getPulse().get(0));
                                existingBatteryLevel.add(jacket.getBatteryLevel().get(0));
                                existingPosition.add(jacket.getPosition().get(0));
                                existingBpmi.add(jacket.getBpmi().get(0));
                                existingBpm.add(jacket.getBpm().get(0));
                                existingNleads.add(jacket.getNleads().get(0));
                                existingNbytes.add(jacket.getnBytes().get(0));

                                getInstantStress(rr1);

                                db.collection("jacketdata").document(document.getId())
                                        .update(
                                                "rr", existingRr,
                                                "pulse", existingPulse,
                                                "batteryLevel", existingBatteryLevel,
                                                "position", existingPosition,
                                                "bpmi", existingBpmi,
                                                "bpm", existingBpm,
                                                "nleads", existingNleads,
                                                "nBytes", existingNbytes,
                                                "dateTimeSpan", FieldValue.arrayUnion(jacket.getDateTimeSpan().get(0))
                                        )
                                        .addOnSuccessListener(new OnSuccessListener<Void>() {
                                            @Override
                                            public void onSuccess(Void aVoid) {
                                                Log.d(TAG, "Documento Jacket atualizado com sucesso!");
                                            }
                                        })
                                        .addOnFailureListener(new OnFailureListener() {
                                            @Override
                                            public void onFailure(@NonNull Exception e) {
                                                Log.w(TAG, "Erro ao atualizar documento Jacket", e);
                                            }
                                        });
                                return; // Termina a execução após encontrar o documento
                            }
                            // Se não encontrou um documento existente, adiciona um novo
                            db.collection("jacketdata").add(jacket)
                                    .addOnSuccessListener(new OnSuccessListener<DocumentReference>() {
                                        @Override
                                        public void onSuccess(DocumentReference documentReference) {
                                            Log.d(TAG, "Documento Jacket adicionado com ID: " + documentReference.getId()+ "BPM:" + existingBpm );
                                        }
                                    })
                                    .addOnFailureListener(new OnFailureListener() {
                                        @Override
                                        public void onFailure(@NonNull Exception e) {
                                            Log.w(TAG, "Erro ao adicionar documento Jacket", e);
                                        }
                                    });
                        } else {
                            Log.w(TAG, "Erro ao obter documentos.", task.getException());
                        }
                    }
                });
    }
